// This file was generated by counterfeiter
package originfakes

import (
	"sync"

	"github.com/dpb587/metalink/origin"
)

type FakeOriginFactory struct {
	NewStub        func(string) (origin.Origin, error)
	newMutex       sync.RWMutex
	newArgsForCall []struct {
		arg1 string
	}
	newReturns struct {
		result1 origin.Origin
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOriginFactory) New(arg1 string) (origin.Origin, error) {
	fake.newMutex.Lock()
	fake.newArgsForCall = append(fake.newArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("New", []interface{}{arg1})
	fake.newMutex.Unlock()
	if fake.NewStub != nil {
		return fake.NewStub(arg1)
	}
	return fake.newReturns.result1, fake.newReturns.result2
}

func (fake *FakeOriginFactory) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *FakeOriginFactory) NewArgsForCall(i int) string {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return fake.newArgsForCall[i].arg1
}

func (fake *FakeOriginFactory) NewReturns(result1 origin.Origin, result2 error) {
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 origin.Origin
		result2 error
	}{result1, result2}
}

func (fake *FakeOriginFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeOriginFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ origin.OriginFactory = new(FakeOriginFactory)
