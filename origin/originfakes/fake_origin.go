// This file was generated by counterfeiter
package originfakes

import (
	"io"
	"sync"
	"time"

	boshcry "github.com/cloudfoundry/bosh-utils/crypto"
	"github.com/dpb587/blob-receipt/origin"
)

type FakeOrigin struct {
	StringStub        func() string
	stringMutex       sync.RWMutex
	stringArgsForCall []struct{}
	stringReturns     struct {
		result1 string
	}
	DigestStub        func(boshcry.Algorithm) (boshcry.Digest, error)
	digestMutex       sync.RWMutex
	digestArgsForCall []struct {
		arg1 boshcry.Algorithm
	}
	digestReturns struct {
		result1 boshcry.Digest
		result2 error
	}
	NameStub        func() (string, error)
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
		result2 error
	}
	SizeStub        func() (uint64, error)
	sizeMutex       sync.RWMutex
	sizeArgsForCall []struct{}
	sizeReturns     struct {
		result1 uint64
		result2 error
	}
	TimeStub        func() (time.Time, error)
	timeMutex       sync.RWMutex
	timeArgsForCall []struct{}
	timeReturns     struct {
		result1 time.Time
		result2 error
	}
	ReaderStub        func() (io.Reader, error)
	readerMutex       sync.RWMutex
	readerArgsForCall []struct{}
	readerReturns     struct {
		result1 io.Reader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOrigin) String() string {
	fake.stringMutex.Lock()
	fake.stringArgsForCall = append(fake.stringArgsForCall, struct{}{})
	fake.recordInvocation("String", []interface{}{})
	fake.stringMutex.Unlock()
	if fake.StringStub != nil {
		return fake.StringStub()
	}
	return fake.stringReturns.result1
}

func (fake *FakeOrigin) StringCallCount() int {
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	return len(fake.stringArgsForCall)
}

func (fake *FakeOrigin) StringReturns(result1 string) {
	fake.StringStub = nil
	fake.stringReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeOrigin) Digest(arg1 boshcry.Algorithm) (boshcry.Digest, error) {
	fake.digestMutex.Lock()
	fake.digestArgsForCall = append(fake.digestArgsForCall, struct {
		arg1 boshcry.Algorithm
	}{arg1})
	fake.recordInvocation("Digest", []interface{}{arg1})
	fake.digestMutex.Unlock()
	if fake.DigestStub != nil {
		return fake.DigestStub(arg1)
	}
	return fake.digestReturns.result1, fake.digestReturns.result2
}

func (fake *FakeOrigin) DigestCallCount() int {
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	return len(fake.digestArgsForCall)
}

func (fake *FakeOrigin) DigestArgsForCall(i int) boshcry.Algorithm {
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	return fake.digestArgsForCall[i].arg1
}

func (fake *FakeOrigin) DigestReturns(result1 boshcry.Digest, result2 error) {
	fake.DigestStub = nil
	fake.digestReturns = struct {
		result1 boshcry.Digest
		result2 error
	}{result1, result2}
}

func (fake *FakeOrigin) Name() (string, error) {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	return fake.nameReturns.result1, fake.nameReturns.result2
}

func (fake *FakeOrigin) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeOrigin) NameReturns(result1 string, result2 error) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOrigin) Size() (uint64, error) {
	fake.sizeMutex.Lock()
	fake.sizeArgsForCall = append(fake.sizeArgsForCall, struct{}{})
	fake.recordInvocation("Size", []interface{}{})
	fake.sizeMutex.Unlock()
	if fake.SizeStub != nil {
		return fake.SizeStub()
	}
	return fake.sizeReturns.result1, fake.sizeReturns.result2
}

func (fake *FakeOrigin) SizeCallCount() int {
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	return len(fake.sizeArgsForCall)
}

func (fake *FakeOrigin) SizeReturns(result1 uint64, result2 error) {
	fake.SizeStub = nil
	fake.sizeReturns = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeOrigin) Time() (time.Time, error) {
	fake.timeMutex.Lock()
	fake.timeArgsForCall = append(fake.timeArgsForCall, struct{}{})
	fake.recordInvocation("Time", []interface{}{})
	fake.timeMutex.Unlock()
	if fake.TimeStub != nil {
		return fake.TimeStub()
	}
	return fake.timeReturns.result1, fake.timeReturns.result2
}

func (fake *FakeOrigin) TimeCallCount() int {
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	return len(fake.timeArgsForCall)
}

func (fake *FakeOrigin) TimeReturns(result1 time.Time, result2 error) {
	fake.TimeStub = nil
	fake.timeReturns = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeOrigin) Reader() (io.Reader, error) {
	fake.readerMutex.Lock()
	fake.readerArgsForCall = append(fake.readerArgsForCall, struct{}{})
	fake.recordInvocation("Reader", []interface{}{})
	fake.readerMutex.Unlock()
	if fake.ReaderStub != nil {
		return fake.ReaderStub()
	}
	return fake.readerReturns.result1, fake.readerReturns.result2
}

func (fake *FakeOrigin) ReaderCallCount() int {
	fake.readerMutex.RLock()
	defer fake.readerMutex.RUnlock()
	return len(fake.readerArgsForCall)
}

func (fake *FakeOrigin) ReaderReturns(result1 io.Reader, result2 error) {
	fake.ReaderStub = nil
	fake.readerReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOrigin) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	fake.digestMutex.RLock()
	defer fake.digestMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	fake.readerMutex.RLock()
	defer fake.readerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeOrigin) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ origin.Origin = new(FakeOrigin)
